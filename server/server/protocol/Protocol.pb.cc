// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyData_Protocol_2eproto;
namespace Message {
class KeyDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyData> _instance;
} _KeyData_default_instance_;
class KeyChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyChange> _instance;
} _KeyChange_default_instance_;
}  // namespace Message
static void InitDefaultsKeyData_Protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::_KeyData_default_instance_;
    new (ptr) ::Message::KeyData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::KeyData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeyData_Protocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeyData_Protocol_2eproto}, {}};

static void InitDefaultsKeyChange_Protocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Message::_KeyChange_default_instance_;
    new (ptr) ::Message::KeyChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::KeyChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KeyChange_Protocol_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKeyChange_Protocol_2eproto}, {
      &scc_info_KeyData_Protocol_2eproto.base,}};

void InitDefaults_Protocol_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_KeyData_Protocol_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeyChange_Protocol_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_Protocol_2eproto[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_Protocol_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Message::KeyData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Message::KeyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Message::KeyData, key_),
  PROTOBUF_FIELD_OFFSET(::Message::KeyData, keystate_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Message::KeyChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Message::KeyChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Message::KeyChange, keydatas_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::Message::KeyData)},
  { 9, 15, sizeof(::Message::KeyChange)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::_KeyData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Message::_KeyChange_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Protocol_2eproto = {
  {}, AddDescriptors_Protocol_2eproto, "Protocol.proto", schemas,
  file_default_instances, TableStruct_Protocol_2eproto::offsets,
  file_level_metadata_Protocol_2eproto, 2, file_level_enum_descriptors_Protocol_2eproto, file_level_service_descriptors_Protocol_2eproto,
};

const char descriptor_table_protodef_Protocol_2eproto[] =
  "\n\016Protocol.proto\022\007Message\"M\n\007KeyData\022\035\n\003"
  "key\030\001 \002(\0162\020.Message.KeyType\022#\n\010keyState\030"
  "\002 \002(\0162\021.Message.KeyState\"/\n\tKeyChange\022\"\n"
  "\010keyDatas\030\001 \003(\0132\020.Message.KeyData*.\n\007Key"
  "Type\022\010\n\004Fire\020\000\022\n\n\006Change\020\001\022\r\n\tTypeCount\020"
  "\002*7\n\010KeyState\022\010\n\004Down\020\000\022\006\n\002Up\020\001\022\t\n\005Click"
  "\020\002\022\016\n\nStateCount\020\003"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_Protocol_2eproto = {
  false, InitDefaults_Protocol_2eproto, 
  descriptor_table_protodef_Protocol_2eproto,
  "Protocol.proto", &assign_descriptors_table_Protocol_2eproto, 258,
};

void AddDescriptors_Protocol_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Protocol_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Protocol_2eproto = []() { AddDescriptors_Protocol_2eproto(); return true; }();
namespace Message {
const ::google::protobuf::EnumDescriptor* KeyType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[0];
}
bool KeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KeyState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[1];
}
bool KeyState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void KeyData::InitAsDefaultInstance() {
}
class KeyData::HasBitSetters {
 public:
  static void set_has_key(KeyData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_keystate(KeyData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyData::kKeyFieldNumber;
const int KeyData::kKeyStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyData::KeyData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.KeyData)
}
KeyData::KeyData(const KeyData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&keystate_) -
    reinterpret_cast<char*>(&key_)) + sizeof(keystate_));
  // @@protoc_insertion_point(copy_constructor:Message.KeyData)
}

void KeyData::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keystate_) -
      reinterpret_cast<char*>(&key_)) + sizeof(keystate_));
}

KeyData::~KeyData() {
  // @@protoc_insertion_point(destructor:Message.KeyData)
  SharedDtor();
}

void KeyData::SharedDtor() {
}

void KeyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyData& KeyData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_KeyData_Protocol_2eproto.base);
  return *internal_default_instance();
}


void KeyData::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.KeyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&keystate_) -
        reinterpret_cast<char*>(&key_)) + sizeof(keystate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KeyData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<KeyData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .Message.KeyType key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::Message::KeyType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_key(static_cast<::Message::KeyType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .Message.KeyState keyState = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::Message::KeyState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_keystate(static_cast<::Message::KeyState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KeyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.KeyData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Message.KeyType key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Message::KeyType_IsValid(value)) {
            set_key(static_cast< ::Message::KeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Message.KeyState keyState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Message::KeyState_IsValid(value)) {
            set_keystate(static_cast< ::Message::KeyState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.KeyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.KeyData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KeyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.KeyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Message.KeyType key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->key(), output);
  }

  // required .Message.KeyState keyState = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->keystate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.KeyData)
}

::google::protobuf::uint8* KeyData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Message.KeyData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Message.KeyType key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->key(), target);
  }

  // required .Message.KeyState keyState = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->keystate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.KeyData)
  return target;
}

size_t KeyData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Message.KeyData)
  size_t total_size = 0;

  if (has_key()) {
    // required .Message.KeyType key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key());
  }

  if (has_keystate()) {
    // required .Message.KeyState keyState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->keystate());
  }

  return total_size;
}
size_t KeyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.KeyData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Message.KeyType key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key());

    // required .Message.KeyState keyState = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->keystate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.KeyData)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyData* source =
      ::google::protobuf::DynamicCastToGenerated<KeyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.KeyData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.KeyData)
    MergeFrom(*source);
  }
}

void KeyData::MergeFrom(const KeyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.KeyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      keystate_ = from.keystate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeyData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.KeyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyData::CopyFrom(const KeyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.KeyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void KeyData::Swap(KeyData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyData::InternalSwap(KeyData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(key_, other->key_);
  swap(keystate_, other->keystate_);
}

::google::protobuf::Metadata KeyData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Protocol_2eproto);
  return ::file_level_metadata_Protocol_2eproto[kIndexInFileMessages];
}


// ===================================================================

void KeyChange::InitAsDefaultInstance() {
}
class KeyChange::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyChange::kKeyDatasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyChange::KeyChange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message.KeyChange)
}
KeyChange::KeyChange(const KeyChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      keydatas_(from.keydatas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Message.KeyChange)
}

void KeyChange::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_KeyChange_Protocol_2eproto.base);
}

KeyChange::~KeyChange() {
  // @@protoc_insertion_point(destructor:Message.KeyChange)
  SharedDtor();
}

void KeyChange::SharedDtor() {
}

void KeyChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyChange& KeyChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_KeyChange_Protocol_2eproto.base);
  return *internal_default_instance();
}


void KeyChange::Clear() {
// @@protoc_insertion_point(message_clear_start:Message.KeyChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keydatas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KeyChange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<KeyChange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .Message.KeyData keyDatas = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Message::KeyData::_InternalParse;
          object = msg->add_keydatas();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KeyChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message.KeyChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Message.KeyData keyDatas = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keydatas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message.KeyChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message.KeyChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KeyChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message.KeyChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Message.KeyData keyDatas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keydatas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->keydatas(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Message.KeyChange)
}

::google::protobuf::uint8* KeyChange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Message.KeyChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Message.KeyData keyDatas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keydatas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->keydatas(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message.KeyChange)
  return target;
}

size_t KeyChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message.KeyChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Message.KeyData keyDatas = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->keydatas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keydatas(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message.KeyChange)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyChange* source =
      ::google::protobuf::DynamicCastToGenerated<KeyChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message.KeyChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message.KeyChange)
    MergeFrom(*source);
  }
}

void KeyChange::MergeFrom(const KeyChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message.KeyChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keydatas_.MergeFrom(from.keydatas_);
}

void KeyChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message.KeyChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyChange::CopyFrom(const KeyChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message.KeyChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyChange::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->keydatas())) return false;
  return true;
}

void KeyChange::Swap(KeyChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyChange::InternalSwap(KeyChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&keydatas_)->InternalSwap(CastToBase(&other->keydatas_));
}

::google::protobuf::Metadata KeyChange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Protocol_2eproto);
  return ::file_level_metadata_Protocol_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Message::KeyData* Arena::CreateMaybeMessage< ::Message::KeyData >(Arena* arena) {
  return Arena::CreateInternal< ::Message::KeyData >(arena);
}
template<> PROTOBUF_NOINLINE ::Message::KeyChange* Arena::CreateMaybeMessage< ::Message::KeyChange >(Arena* arena) {
  return Arena::CreateInternal< ::Message::KeyChange >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
